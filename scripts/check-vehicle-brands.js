// Script pentru verificarea vehiculelor existente din baza de date
// »ôi a mƒÉrcilor/modelelor lor

const { createClient } = require('@supabase/supabase-js');
const { carBrands } = require('../src/data/carBrands.ts');

// Configurare Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variabilele de mediu Supabase lipsesc!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkVehicleBrands() {
  try {
    console.log('üîç Verificare vehicule din baza de date...\n');
    
    // Ob»õine toate vehiculele
    const { data: vehicles, error } = await supabase
      .from('stock')
      .select('id, marca, model, created_at')
      .order('created_at', { ascending: false });
    
    if (error) {
      throw error;
    }
    
    if (!vehicles || vehicles.length === 0) {
      console.log('‚ÑπÔ∏è Nu existƒÉ vehicule √Æn baza de date.');
      return;
    }
    
    console.log(`üìä GƒÉsite ${vehicles.length} vehicule √Æn baza de date.\n`);
    
    // GrupeazƒÉ vehiculele dupƒÉ marcƒÉ
    const vehiclesByBrand = {};
    vehicles.forEach(vehicle => {
      if (!vehiclesByBrand[vehicle.marca]) {
        vehiclesByBrand[vehicle.marca] = [];
      }
      vehiclesByBrand[vehicle.marca].push(vehicle);
    });
    
    // Afi»ôeazƒÉ statistici
    console.log('üìà Statistici vehicule:');
    Object.entries(vehiclesByBrand).forEach(([brand, brandVehicles]) => {
      console.log(`  ${brand}: ${brandVehicles.length} vehicule`);
    });
    
    console.log('\nüîç Verificare compatibilitate cu mƒÉrcile predefinite:');
    
    let compatibleCount = 0;
    let incompatibleCount = 0;
    const incompatibleVehicles = [];
    
    vehicles.forEach(vehicle => {
      const brandExists = carBrands.find(b => b.brand === vehicle.marca);
      const modelExists = brandExists?.models.find(m => m === vehicle.model);
      
      if (brandExists && modelExists) {
        compatibleCount++;
      } else {
        incompatibleCount++;
        incompatibleVehicles.push({
          id: vehicle.id,
          marca: vehicle.marca,
          model: vehicle.model,
          brandExists: !!brandExists,
          modelExists: !!modelExists
        });
      }
    });
    
    console.log(`‚úÖ Compatibile: ${compatibleCount}`);
    console.log(`‚ùå Incompatibile: ${incompatibleCount}`);
    
    if (incompatibleVehicles.length > 0) {
      console.log('\n‚ùå Vehicule incompatibile:');
      incompatibleVehicles.forEach(vehicle => {
        console.log(`  - ID ${vehicle.id}: ${vehicle.marca} ${vehicle.model}`);
        if (!vehicle.brandExists) {
          console.log(`    ‚ö†Ô∏è Marca "${vehicle.marca}" nu existƒÉ √Æn lista predefinitƒÉ`);
        }
        if (!vehicle.modelExists) {
          console.log(`    ‚ö†Ô∏è Modelul "${vehicle.model}" nu existƒÉ pentru marca "${vehicle.marca}"`);
        }
      });
    }
    
    console.log('\nüìã MƒÉrci disponibile √Æn lista predefinitƒÉ:');
    carBrands.forEach((brand, index) => {
      console.log(`  ${index + 1}. ${brand.brand} (${brand.models.length} modele)`);
    });
    
    console.log('\n‚ú® Verificarea s-a terminat cu succes!');
    
  } catch (error) {
    console.error('‚ùå Eroare la verificarea vehiculelor:', error);
    process.exit(1);
  }
}

// RuleazƒÉ scriptul
checkVehicleBrands();
